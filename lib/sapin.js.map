{"version":3,"file":"sapin.js","mappings":"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","sources":["webpack://sapin/webpack/universalModuleDefinition","webpack://sapin/external umd {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"lodash\",\"root\":\"_\"}","webpack://sapin/webpack/bootstrap","webpack://sapin/webpack/runtime/define property getters","webpack://sapin/webpack/runtime/hasOwnProperty shorthand","webpack://sapin/webpack/runtime/make namespace object","webpack://sapin/./src/common.js","webpack://sapin/./src/numbers-validators.js","webpack://sapin/./src/required-validators.js","webpack://sapin/./src/strings-validators.js","webpack://sapin/./src/collections.js","webpack://sapin/./src/validatorRunner.js","webpack://sapin/./src/validate.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sapin\", [\"lodash\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sapin\"] = factory(require(\"lodash\"));\n\telse\n\t\troot[\"sapin\"] = factory(root[\"_\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__607__) {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__607__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import pkg from 'lodash'\r\nconst {get, trim, isArray, isString, keys, filter} = pkg\r\n\r\nexport const Errors = {\r\n  required: 'sapin.required',\r\n  isNumber: 'sapin.invalidNumber',\r\n  isInteger: 'sapin.invalidInteger',\r\n  isPositive: 'sapin.valueShouldBePositive',\r\n  isNegative: 'sapin.valueShouldBeNegative',\r\n  isGt: 'sapin.valueShouldBeGt',\r\n  isGte: 'sapin.valueShouldBeGte',\r\n  isLt: 'sapin.valueShouldBeLt',\r\n  isLte: 'sapin.valueShouldBeLte',\r\n  isGtField: 'sapin.valueShouldBeGtField',\r\n  isGteToField: 'sapin.valueShouldBeGteField',\r\n  isLtField: 'sapin.valueShouldBeLtField',\r\n  isLteToField: 'sapin.valueShouldBeLteField',\r\n  withinRange: 'sapin.valueNotInRange',\r\n  minLength: 'sapin.valueNotLongEnough',\r\n  maxLength: 'sapin.valueTooLong',\r\n  isEmail: 'sapin.invalidEmail'\r\n}\r\n\r\nexport const noTrim = () => true\r\n\r\nconst internalFormatError = (error /*, config */) => {\r\n  return error\r\n}\r\n\r\nconst getValue = (entity, path, validators, config) => {\r\n  let value = get(entity, path, undefined)\r\n  if (typeof value === 'string' && config.useTrim) {\r\n    if (!isArray(validators) || validators.indexOf(noTrim) === -1) {\r\n      value = trim(value)\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\n// caller should not pass undefined or null\r\nconst getNumber = (value) => {\r\n  let transformedValue = value\r\n  if (isString(transformedValue)) {\r\n    transformedValue = transformedValue.replace(',', '.')\r\n  }\r\n  return Number(transformedValue)\r\n}\r\n\r\nconst isEmptyValue = (value) => value === undefined || value === null || value === ''\r\n\r\nexport const defaultConfig = {\r\n  formatError: internalFormatError,\r\n  getValue,\r\n  getNumber,\r\n  isEmptyValue,\r\n  useTrim: true,\r\n  params: {}\r\n}\r\n\r\nexport const createConfig = (newConfig) => {\r\n  const config = Object.assign({}, defaultConfig, newConfig)\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const KNOWN_KEYS = new Set(keys(defaultConfig))\r\n    const unexpectedKeys = filter(keys(newConfig), key => !KNOWN_KEYS.has(key))\r\n    if (unexpectedKeys.length) {\r\n      throw new Error(`createConfig received an unexpected key '${unexpectedKeys.join(', ')}'`)\r\n    }\r\n  }\r\n  return config\r\n}\r\n","import pkg from 'lodash'\r\nimport {Errors} from './common.js'\r\nconst {isNil, get, gt, gte, lt, lte} = pkg\r\n\r\nexport const isNumber = ({value, config}) => {\r\n  if (config.isEmptyValue(value)) return null\r\n  const valueToTest = config.getNumber(value)\r\n  return isNaN(valueToTest) ? Errors.isNumber : null\r\n}\r\n\r\nexport const isInteger = ({value, config}) => {\r\n  if (config.isEmptyValue(value)) return null\r\n  const numberValue = config.getNumber(value)\r\n  return (!Number.isInteger(numberValue)) ? Errors.isInteger : null\r\n}\r\n\r\nconst compareSign = (value, isPositive, config) => {\r\n  let err = null\r\n\r\n  if (!config.isEmptyValue(value)) {\r\n    const numberValue = config.getNumber(value)\r\n    if (isNaN(numberValue)) {\r\n      err = Errors.isNumber\r\n    } else if (isPositive && numberValue < 0) {\r\n      err = Errors.isPositive\r\n    } else if (!isPositive && numberValue >= 0) {\r\n      err = Errors.isNegative\r\n    }\r\n  }\r\n  return err\r\n}\r\n\r\nexport const isPositive = ({value, config}) => {\r\n  return compareSign(value, true, config)\r\n}\r\n\r\nexport const isNegative = ({value, config}) => {\r\n  return compareSign(value, false, config)\r\n}\r\n\r\nconst getNumbers = (value, otherFieldName, siblings, config) => {\r\n  const ret = {value: undefined, otherFieldValue: undefined}\r\n  if (!config.isEmptyValue(value)) {\r\n    ret.value = config.getNumber(value)\r\n  }\r\n  let otherFieldValue = get(siblings, otherFieldName)\r\n  if (!config.isEmptyValue(otherFieldValue)) {\r\n    ret.otherFieldValue = config.getNumber(otherFieldValue)\r\n  }\r\n  return ret\r\n}\r\n\r\nconst compareWithOtherField = (value, otherFieldName, otherFieldLabel, siblings, config, op, errorCode) => {\r\n  let err = null\r\n  const operands = getNumbers(value, otherFieldName, siblings, config)\r\n  if (!isNaN(operands.value) && !isNaN(operands.otherFieldValue)) {\r\n    err = op(operands.value, operands.otherFieldValue)\n      ? null\n      : {\r\n          error: errorCode,\r\n          params: {\r\n            value,\r\n            otherFieldValue: operands.otherFieldValue,\r\n            otherFieldLabel\r\n          }\r\n        }\r\n  } else if (operands.value !== undefined && isNaN(operands.value)) {\r\n    err = Errors.isNumber\r\n  }\r\n\r\n  return err\r\n}\r\n\r\nconst compareToThreshold = (value, op, threshold, config, errorCode) => {\r\n  let err = null\r\n  let numberValue = NaN\r\n  if (!config.isEmptyValue(value)) {\r\n    numberValue = config.getNumber(value)\r\n    if (isNaN(numberValue)) {\r\n      err = Errors.isNumber\r\n    } else if (!op(numberValue, threshold)) {\r\n      err = {\r\n        error: errorCode,\r\n        params: {value, threshold}\r\n      }\r\n    }\r\n  }\r\n  return err\r\n}\r\n\r\nexport const isGte = (threshold) => {\r\n  return ({value, config}) => {\r\n    return compareToThreshold(value, gte, threshold, config, Errors.isGte)\r\n  }\r\n}\r\n\r\nexport const isGt = (threshold) => {\r\n  return ({value, config}) => {\r\n    return compareToThreshold(value, gt, threshold, config, Errors.isGt)\r\n  }\r\n}\r\n\r\nexport const isLte = (threshold) => {\r\n  return ({value, config}) => {\r\n    return compareToThreshold(value, lte, threshold, config, Errors.isLte)\r\n  }\r\n}\r\n\r\nexport const isLt = (threshold) => {\r\n  return ({value, config}) => {\r\n    return compareToThreshold(value, lt, threshold, config, Errors.isLt)\r\n  }\r\n}\r\n\r\nexport const isGteToField = (fieldName, fieldLabel) => {\r\n  return ({value, siblings, config}) => {\r\n    return compareWithOtherField(value, fieldName, fieldLabel, siblings, config, gte, Errors.isGteToField)\r\n  }\r\n}\r\n\r\nexport const isGtField = (fieldName, fieldLabel) => {\r\n  return ({value, siblings, config}) => {\r\n    return compareWithOtherField(value, fieldName, fieldLabel, siblings, config, gt, Errors.isGtField)\r\n  }\r\n}\r\n\r\nexport const isLteToField = (fieldName, fieldLabel) => {\r\n  return ({value, siblings, config}) => {\r\n    return compareWithOtherField(value, fieldName, fieldLabel, siblings, config, lte, Errors.isLteToField)\r\n  }\r\n}\r\n\r\nexport const isLtField = (fieldName, fieldLabel) => {\r\n  return ({value, siblings, config}) => {\r\n    return compareWithOtherField(value, fieldName, fieldLabel, siblings, config, lt, Errors.isLtField)\r\n  }\r\n}\r\n\r\nconst ensureRangeParamsAreValid = (minValue, maxValue) => {\r\n  if (isNil(minValue) || isNil(maxValue)) {\r\n    throw new Error('minValue and maxValue cannot be null')\r\n  } else if (minValue > maxValue) {\r\n    throw new Error('minValue > maxValue')\r\n  } else if (typeof minValue !== 'number' || typeof maxValue !== 'number') {\r\n    throw new Error('range value must be numbers')\r\n  }\r\n}\r\nexport const withinRange = (minValue, maxValue) => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    ensureRangeParamsAreValid(minValue, maxValue)\r\n  }\r\n\r\n  return ({value, config}) => {\r\n    if (config.isEmptyValue(value)) return null\r\n    const numberValue = config.getNumber(value)\r\n    if (isNaN(numberValue)) return Errors.isNumber\r\n    if (numberValue < minValue || numberValue > maxValue) {\r\n      return {\r\n        error: Errors.withinRange,\r\n        params: {value, minValue, maxValue}\r\n      }\r\n    }\r\n    return null\r\n  }\r\n}\r\n","import pkg from 'lodash'\r\nimport {Errors} from './common.js'\r\nconst {get, isArray} = pkg\r\n\r\n// required validators\r\nexport const required = ({value, config}) => {\r\n  return config.isEmptyValue(value) ? Errors.required : null\r\n}\r\n\r\nexport const requiredIfOtherFieldIsTrue = (otherFieldName) => {\r\n  return (params) => {\r\n    const otherFieldValue = get(params.siblings, otherFieldName, false)\r\n    if (otherFieldValue) {\r\n      return required(params)\r\n    }\r\n    return null\r\n  }\r\n}\r\n\r\nexport const requiredIfOtherFieldIsFalse = (otherFieldName) => {\r\n  return (params) => {\r\n    const otherFieldValue = get(params.siblings, otherFieldName, true)\r\n    if (!otherFieldValue) {\r\n      return required(params)\r\n    }\r\n    return null\r\n  }\r\n}\r\n\r\n// expectedFieldValue can be a single value or an array of values\r\nexport const requiredIfOtherFieldEquals = (otherFieldName, expectedFieldValue) => {\r\n  expectedFieldValue = isArray(expectedFieldValue) ? expectedFieldValue : [expectedFieldValue]\r\n  const expectedValues = new Set(expectedFieldValue)\r\n  return (params) => {\r\n    const otherFieldValue = get(params.siblings, otherFieldName, false)\r\n    if (expectedValues.has(otherFieldValue)) {\r\n      return required(params)\r\n    }\r\n    return null\r\n  }\r\n}\r\n","import {Errors} from './common.js'\r\n\r\nconst EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\r\nexport const isEmail = ({value, config}) => {\r\n  if (config.isEmptyValue(value)) return null\r\n  return !EMAIL_REGEX.test(value) ? Errors.isEmail : null\r\n}\r\n\r\nexport const minLength = (minLength) => {\r\n  return ({value, config}) => {\r\n    let err = null\r\n    if (!config.isEmptyValue(value) && value.length < minLength) {\r\n      err = {error: Errors.minLength, params: {value, minLength}}\r\n    }\r\n    return err\r\n  }\r\n}\r\n\r\nexport const maxLength = (maxLength) => {\r\n  return ({value, config}) => {\r\n    let err = null\r\n    if (!config.isEmptyValue(value) && value.length > maxLength) {\r\n      err = {error: Errors.maxLength, params: {value, maxLength}}\r\n    }\r\n    return err\r\n  }\r\n}\r\n","import pkg from 'lodash'\r\nconst {isNil, isArray, isObject, isFunction, every} = pkg\r\nexport const ValidatorTypes = {\r\n  object: 1,\r\n  collectionOfValues: 2,\r\n  collectionOfObjects: 3\r\n}\r\n\r\nconst isObjectOrArrayOfFunctions = (target) => {\r\n  let ret = false\r\n  if (isArray(target)) {\r\n    ret = every(target, isFunction)\r\n  } else {\r\n    ret = isObject(target)\r\n  }\r\n  return ret\r\n}\r\n\r\nconst ensureCollectionParamsAreValid = (validator, valueValidator) => {\r\n  if (!isObjectOrArrayOfFunctions(validator)) {\r\n    throw new Error('The \\'validator\\' argument of collection must be a validator object or an array of validator functions')\r\n  } else if (!isNil(valueValidator) && !isObjectOrArrayOfFunctions(valueValidator)) {\r\n    throw new Error('The \\'valueValidator\\' argument of collection must be a validator object or an array of validator functions')\r\n  }\r\n}\r\n\r\nexport const collection = (validator, valueValidator) => {\r\n  const ret = {\r\n    __validator: validator,\r\n    __valueValidator: valueValidator\r\n  }\r\n\r\n  /* istanbul ignore else: node-env */\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    ensureCollectionParamsAreValid(validator, valueValidator)\r\n  }\r\n\r\n  // validator is either an array or an object when we reach this point\r\n  if (isArray(validator) || isFunction(validator)) {\r\n    ret.__type = ValidatorTypes.collectionOfValues\r\n  } else {\r\n    ret.__type = ValidatorTypes.collectionOfObjects\r\n  }\r\n  return ret\r\n}\r\n","import pkg from 'lodash'\r\nimport {ValidatorTypes} from './collections.js'\r\nconst {\r\n  setWith,\r\n  forEach,\r\n  isArray,\r\n  assign,\r\n  isObject,\r\n  omit,\r\n  size,\r\n  isNil,\r\n  isFunction\r\n} = pkg\r\n\r\nexport const ValidatorRunner = function (entity, validators, config) {\r\n  this.entity = entity\r\n  this.validators = validators\r\n  assign(this, config)\r\n}\r\n\r\nValidatorRunner.prototype.run = function () {\r\n  this.errors = {}\r\n  this.validateObject(null, this.entity, this.validators, this.entity)\r\n  return this.errors\r\n}\r\n\r\nValidatorRunner.prototype.runFunctions = function (value, validations, siblings) {\r\n  let err = null\r\n  if (!isArray(validations)) {\r\n    validations = [validations]\r\n  }\r\n  for (let i = 0; !err && i < validations.length; i++) {\r\n    const validation = validations[i]\r\n    err = validation({value, siblings, entity: this.entity, config: this})\r\n  }\r\n  return err\r\n}\r\n\r\nconst ensureValidatorErrorIsValid = (error) => {\r\n  if (isObject(error)) {\r\n    if (isNil(error.error)) {\r\n      throw new Error('a custom validator returned an error object without specifying the error property')\r\n    }\r\n    const purgedError = omit(error, ['error', 'params'])\r\n    if (size(purgedError) > 0) {\r\n      throw new Error('a custom validator returned an error object with unexpected properties. Additional properties should be added to the params attribute')\r\n    }\r\n  }\r\n}\r\n\r\nValidatorRunner.prototype.setError = function (path, error, value) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    ensureValidatorErrorIsValid(error)\r\n  }\r\n  const errorObject = isObject(error) ? error : {error, params: {value}}\r\n  const formattedError = this.formatError(errorObject)\r\n  setWith(this.errors, path, formattedError, Object)\r\n}\r\n\r\nValidatorRunner.prototype.validateField = function (propPath, value, validations, siblings) {\r\n  validations = isFunction(validations) ? [validations] : validations\r\n  const error = this.runFunctions(value, validations, siblings)\r\n  if (error) {\r\n    this.setError(propPath, error, value)\r\n  }\r\n}\r\n\r\nValidatorRunner.prototype.applyValueValidatorOnObject = function (propPath, value, valueValidator, siblings) {\r\n  const valueError = this.runFunctions(value, valueValidator, siblings)\r\n  if (valueError) {\r\n    this.setError(`${propPath}._error`, valueError, value)\r\n  }\r\n}\r\n\r\nValidatorRunner.prototype.validateCollectionOfObjects = function (propPath, objectsCollection, validator) {\r\n  forEach(objectsCollection, (object, idx) => {\r\n    const objectPath = `${propPath}.${idx}`\r\n    this.validateObject(objectPath, object, validator, object, objectsCollection)\r\n  })\r\n}\r\n\r\nValidatorRunner.prototype.validateCollectionOfValues = function (propPath, valuesCollection, validator, siblings) {\r\n  forEach(valuesCollection, (value, idx) => {\r\n    const valuePath = `${propPath}.${idx}`\r\n    const valueToValidate = this.getValue(valuesCollection, idx, validator, this)\r\n\r\n    this.validateField(valuePath, valueToValidate, validator, siblings)\r\n  })\r\n}\r\n\r\nValidatorRunner.prototype.validateObject = function (objectPath, object, objectValidator, siblings) {\r\n  for (let propNameToValidate in objectValidator) {\r\n    const propValidations = objectValidator[propNameToValidate]\r\n    const propPath = objectPath ? `${objectPath}.${propNameToValidate}` : propNameToValidate\r\n    const value = this.getValue(object, propNameToValidate, propValidations, this)\r\n\r\n    if (isArray(propValidations) || isFunction(propValidations)) {\r\n      this.validateField(propPath, value, propValidations, siblings)\r\n    } else if (!propValidations.__type) {\r\n      this.validateObject(propPath, value, propValidations, value)\r\n    }\r\n\r\n    if (propValidations.__valueValidator) {\r\n      this.applyValueValidatorOnObject(propPath, value, propValidations.__valueValidator, siblings)\r\n    }\r\n\r\n    if (propValidations.__type === ValidatorTypes.collectionOfObjects) {\r\n      this.validateCollectionOfObjects(propPath, value, propValidations.__validator)\r\n    } else if (propValidations.__type === ValidatorTypes.collectionOfValues) {\r\n      this.validateCollectionOfValues(propPath, value, propValidations.__validator, object)\r\n    }\r\n  }\r\n}\r\n","import pkg from 'lodash'\r\nimport {defaultConfig} from './common.js'\r\nimport {ValidatorRunner} from './validatorRunner.js'\r\nconst {isObject, isArray, isFunction, keys, omit} = pkg\r\n\r\nconst internalProps = ['__type', '__validator', '__valueValidator']\r\n\r\nconst ensureArrayContainsOnlyFunctions = (validator, propName) => {\r\n  for (let i = 0; i < validator.length; i++) {\r\n    if (!isFunction(validator[i])) {\r\n      throw new Error(`validator definition at path ${propName} expects an array of functions. Item a index ${i} isn't one`)\r\n    }\r\n  }\r\n}\r\nconst ensureValidatorIsValid = (validator, propName) => {\r\n  if (isArray(validator)) {\r\n    ensureArrayContainsOnlyFunctions(validator, propName)\r\n  } else if (!isFunction(validator) && isObject(validator)) {\r\n    const propValidators = keys(omit(validator, internalProps))\r\n    propValidators.forEach(prop => {\r\n      const childPropName = `${propName}.${prop}`\r\n      ensureValidatorIsValid(validator[prop], childPropName)\r\n    })\r\n  } else if (!isFunction(validator)) {\r\n    throw new Error(`validator definition at path ${propName} must be an object, a function or an array of validator function`)\r\n  }\r\n}\r\n\r\nexport const validate = (values, validator, config = null) => {\r\n  config = config || defaultConfig\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (!isObject(validator)) {\r\n      throw new Error('validate second argument must be a validator object')\r\n    }\r\n    for (let prop in validator) {\r\n      ensureValidatorIsValid(validator[prop], prop)\r\n    }\r\n  }\r\n\r\n  const runner = new ValidatorRunner(values, validator, config)\r\n  return runner.run()\r\n}\r\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__607__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","trim","isArray","isString","keys","filter","pkg","Errors","noTrim","defaultConfig","formatError","error","getValue","entity","path","validators","config","useTrim","indexOf","getNumber","transformedValue","replace","Number","isEmptyValue","params","createConfig","newConfig","assign","isNil","gt","gte","lt","lte","isNumber","valueToTest","isNaN","isInteger","numberValue","compareSign","isPositive","err","isNegative","compareWithOtherField","otherFieldName","otherFieldLabel","siblings","op","errorCode","operands","ret","otherFieldValue","getNumbers","compareToThreshold","threshold","NaN","isGte","isGt","isLte","isLt","isGteToField","fieldName","fieldLabel","isGtField","isLteToField","isLtField","withinRange","minValue","maxValue","required","requiredIfOtherFieldIsTrue","requiredIfOtherFieldIsFalse","requiredIfOtherFieldEquals","expectedFieldValue","expectedValues","Set","has","EMAIL_REGEX","isEmail","test","minLength","length","maxLength","isObject","isFunction","every","collection","validator","valueValidator","__validator","__valueValidator","__type","setWith","forEach","omit","size","ValidatorRunner","this","run","errors","validateObject","runFunctions","validations","i","validation","setError","errorObject","formattedError","validateField","propPath","applyValueValidatorOnObject","valueError","validateCollectionOfObjects","objectsCollection","object","idx","objectPath","validateCollectionOfValues","valuesCollection","valuePath","valueToValidate","objectValidator","propNameToValidate","propValidations","validate","values"],"sourceRoot":""}