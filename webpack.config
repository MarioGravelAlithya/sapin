const webpack = require('webpack')
const path = require('path')
const UglifyJsPlugin = webpack.optimize.UglifyJsPlugin
const pkg = require('./package.json')
const CopyWebpackPlugin = require('copy-webpack-plugin')

const buildConfig = (env) => {
  let libraryName = pkg.name
  let plugins = [], outputFile
  const isProd = env === 'production'

  plugins.push( new webpack.DefinePlugin({
    'process.env.NODE_ENV': isProd ? '"production"' : '"development"'
  }))


  if (isProd) {
    outputFile = libraryName + '.min.js'
    plugins.push(new UglifyJsPlugin({
      parallel: true,
      uglifyOptions: {
        ecma: 5,
        compress: {warnings: false},
        sourceMap: false,
        output: {comments: false, beautify: false}
      }
    }))
    plugins.push(new CopyWebpackPlugin([{
      from: path.join(__dirname, '/src/import.js'),
      to: path.join(__dirname, './lib/index.js')
    }]))
  } else {
    outputFile = libraryName + '.js'
  }

  return config = {
    entry: __dirname + '/src/index.js',
    devtool: 'source-map',
    output: {
      path: __dirname + '/lib',
      filename: outputFile,
      library: libraryName,
      libraryTarget: 'umd',
      umdNamedDefine: true
    },
    externals: {
       lodash: {
         commonjs: 'lodash',
         commonjs2: 'lodash',
         amd: 'lodash',
         root: '_'
       }
    },
    module: {
      rules: [{
        test: /\.js$/,
        use: {
          loader: 'babel-loader',
          options: {
            babelrc: false,
            cacheDirectory: false,
            presets: ['es2015']
          }
        }
      }]
    },
    resolve: {
      modules: [path.resolve('./node_modules'), path.resolve('./src')],
      extensions: ['.js']
    },
    plugins: plugins
  }
}

module.exports = buildConfig
