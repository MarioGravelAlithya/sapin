const webpack = require('webpack')
const path = require('path')
const UglifyJsPlugin = webpack.optimize.UglifyJsPlugin
const pkg = require('./package.json')

const buildConfig = (env) => {
  let libraryName = pkg.name
  let plugins = [], outputFile
  const isProd = env.env === 'production'

  if (isProd) {
    outputFile = libraryName + '.min.js'
    plugins.push(new webpack.LoaderOptionsPlugin({
      minimize: true
    }))
  } else {
    outputFile = libraryName + '.js'
  }

  return config = {
    entry: __dirname + '/src/index.js',
    devtool: 'source-map',
    target: 'node',
    output: {
      globalObject: 'this',
      path: __dirname + '/lib',
      filename: outputFile,
      library: libraryName,
      libraryTarget: 'umd',
      umdNamedDefine: true
    },
    module: {
      rules: [{
        test: /\.js$/,
        use: {
          loader: 'babel-loader',
          options: {
            babelrc: false,
            cacheDirectory: false,
          }
        }
      }]
    },
    resolve: {
      modules: [path.resolve('./node_modules'), path.resolve('./src')],
      extensions: ['.js']
    },
    plugins: plugins
  }
}

module.exports = buildConfig
